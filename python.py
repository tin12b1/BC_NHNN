import streamlit as st
import pandas as pd
from datetime import date

# H√†m t√≠nh tu·ªïi t·ª´ ng√†y sinh
def calculate_age(born):
    """
    T√≠nh tu·ªïi c·ªßa kh√°ch h√†ng d·ª±a tr√™n ng√†y sinh v√† ng√†y hi·ªán t·∫°i.
    H√†m x·ª≠ l√Ω c√°c gi√° tr·ªã NaN/NaT v√† ƒë·∫£m b·∫£o ƒë·ªëi t∆∞·ª£ng l√† datetime.date.
    """
    if pd.isna(born):
        return None
    
    # ƒê·∫£m b·∫£o 'born' l√† ƒë·ªëi t∆∞·ª£ng date thu·∫ßn t√∫y
    try:
        if not isinstance(born, date):
            # N·∫øu l√† Timestamp, chuy·ªÉn sang datetime.date
            born = born.to_pydatetime().date() 
    except:
        # X·ª≠ l√Ω tr∆∞·ªùng h·ª£p kh√¥ng th·ªÉ chuy·ªÉn ƒë·ªïi th√†nh date (d·ªØ li·ªáu l·ªói)
        return None 

    today = date.today()
    
    # C√¥ng th·ª©c t√≠nh tu·ªïi
    age = today.year - born.year - ((today.month, today.day) < (born.month, born.day))
    return age

# H√†m ch√≠nh c·ªßa ·ª©ng d·ª•ng Streamlit
def main():
    # C·∫•u h√¨nh trang
    st.set_page_config(page_title="·ª®ng D·ª•ng Ph√¢n T√≠ch D·ªØ Li·ªáu Excel", layout="wide")
    
    st.title("üìä C√¥ng C·ª• Ph√¢n T√≠ch D·ªØ Li·ªáu Kh√°ch H√†ng T√†i Kho·∫£n")
    st.markdown("""
    Ch√†o m·ª´ng b·∫°n! Vui l√≤ng t·∫£i l√™n t·ªáp **Excel (.xlsx, .xls)** c·ªßa b·∫°n ƒë·ªÉ b·∫Øt ƒë·∫ßu ph√¢n t√≠ch.
    """)
    st.markdown("---")

    # I. Ch·ª©c nƒÉng n·∫°p file excel
    uploaded_file = st.file_uploader(
        "T·∫£i l√™n t·ªáp Excel (ch·ªâ h·ªó tr·ª£ .xlsx ho·∫∑c .xls)", 
        type=["xlsx", "xls"]
    )

    # Kh·ªëi x·ª≠ l√Ω khi c√≥ t·ªáp ƒë∆∞·ª£c t·∫£i l√™n
    if uploaded_file is not None:
        try:
            # ƒê·ªçc t·ªáp Excel
            df = pd.read_excel(uploaded_file)
            st.success("T·∫£i t·ªáp l√™n th√†nh c√¥ng!")

            # ƒê·ªãnh nghƒ©a c√°c c·ªôt b·∫Øt bu·ªôc theo y√™u c·∫ßu
            required_cols = [
                'Acctcd', 'Customer_No', 'Customer_Name', 
                'Cust_TypeCode', 'Birthday', 'Cust_DetailTypeCode'
            ]
            
            # Ki·ªÉm tra v√† l·ªçc c√°c c·ªôt c·∫ßn thi·∫øt
            missing_cols = [col for col in required_cols if col not in df.columns]
            
            if missing_cols:
                st.error(f"""
                **L·ªói: Kh√¥ng t√¨m th·∫•y c√°c c·ªôt b·∫Øt bu·ªôc sau trong t·ªáp c·ªßa b·∫°n:** {', '.join(missing_cols)}
                
                Vui l√≤ng ki·ªÉm tra ch√≠nh x√°c t√™n c√°c c·ªôt: **Acctcd, Customer_No, Customer_Name, Cust_TypeCode, Birthday, Cust_DetailTypeCode**.
                """)
                return

            df_filtered = df[required_cols].copy()
            
            st.subheader("Xem tr∆∞·ªõc D·ªØ li·ªáu (6 C·ªôt C·∫ßn Thi·∫øt)")
            st.dataframe(df_filtered.head())
            st.write(f"T·ªïng s·ªë b·∫£n ghi trong t·ªáp: **{len(df_filtered):,}**")
            st.markdown("---")

            # Chu·∫©n h√≥a d·ªØ li·ªáu cho vi·ªác ph√¢n t√≠ch
            df_filtered['Acctcd'] = df_filtered['Acctcd'].astype(str).str.strip()
            df_filtered['Cust_TypeCode'] = df_filtered['Cust_TypeCode'].astype(str).str.strip()
            df_filtered['Cust_DetailTypeCode'] = df_filtered['Cust_DetailTypeCode'].astype(str).str.strip()
            
            # Chuy·ªÉn ƒë·ªïi c·ªôt 'Birthday' sang ƒë·ªãnh d·∫°ng datetime
            df_filtered['Birthday'] = pd.to_datetime(df_filtered['Birthday'], errors='coerce')


            # II. N√∫t b·∫•m t√≠nh to√°n
            if st.button("üöÄ Th·ª±c Hi·ªán Ph√¢n T√≠ch & T√≠nh To√°n", use_container_width=True):
                
                # --- CALCULATIONS ---
                with st.spinner("ƒêang th·ª±c hi·ªán t√≠nh to√°n..."):
                    
                    # 1. S·ªë l∆∞·ª£ng b·∫£n ghi m√† kh√°ch h√†ng ƒë·ªô tu·ªïi t·ª´ 15 tr·ªü l√™n
                    df_filtered['Age'] = df_filtered['Birthday'].apply(calculate_age)
                    count_age_15_plus = df_filtered[df_filtered['Age'] >= 15].shape[0]

                    # 2. S·ªë l∆∞·ª£ng t√†i kho·∫£n thanh to√°n c·ªßa KHCN
                    # Ti√™u ch√≠: Acctcd = 421101 AND Cust_TypeCode = 100
                    criteria_khcn_payment = (
                        (df_filtered['Acctcd'] == '421101') & 
                        (df_filtered['Cust_TypeCode'] == '100')
                    )
                    count_khcn_payment = df_filtered[criteria_khcn_payment].shape[0]
                    
                    # 2.1. T√†i kho·∫£n EKYC (Sub-item)
                    # Ti√™u ch√≠: Acctcd = 421101 AND Cust_TypeCode = 100 AND Cust_DetailTypeCode = '104'
                    criteria_khcn_ekyc = (
                        criteria_khcn_payment & 
                        (df_filtered['Cust_DetailTypeCode'] == '104')
                    )
                    count_khcn_ekyc = df_filtered[criteria_khcn_ekyc].shape[0]

                    # 3. S·ªê L∆Ø·ª¢NG H·ªí S∆† CIF KHCN (UNIQUE) - ƒê√É B·ªî SUNG
                    # Ti√™u ch√≠: Cust_TypeCode = 100
                    criteria_khcn_cif = (df_filtered['Cust_TypeCode'] == '100')
                    # ƒê·∫øm s·ªë l∆∞·ª£ng kh√°ch h√†ng duy nh·∫•t (Customer_No)
                    count_khcn_cif = df_filtered[criteria_khcn_cif]['Customer_No'].nunique()
                    
                    # 4. S·ªë l∆∞·ª£ng h·ªì s∆° CIF KHTC (unique Customer_No) - TR∆Ø·ªöC L√Ä M·ª§C 3
                    # Ti√™u ch√≠: Cust_TypeCode kh√°c 100
                    criteria_khtc_cif = (df_filtered['Cust_TypeCode'] != '100')
                    # ƒê·∫øm s·ªë l∆∞·ª£ng kh√°ch h√†ng duy nh·∫•t (Customer_No)
                    count_khtc_cif = df_filtered[criteria_khtc_cif]['Customer_No'].nunique()

                    # 5. S·ªë l∆∞·ª£ng t√†i kho·∫£n thanh to√°n c·ªßa KHTC - TR∆Ø·ªöC L√Ä M·ª§C 4
                    # Ti√™u ch√≠: Acctcd = 421101 AND Cust_TypeCode kh√°c 100
                    criteria_khtc_payment = (
                        (df_filtered['Acctcd'] == '421101') & 
                        (df_filtered['Cust_TypeCode'] != '100')
                    )
                    count_khtc_payment = df_filtered[criteria_khtc_payment].shape[0]

                # --- DISPLAY RESULTS ---
                st.subheader("üéâ K·∫øt Qu·∫£ Ph√¢n T√≠ch")

                # Chu·∫©n b·ªã d·ªØ li·ªáu hi·ªÉn th·ªã chi ti·∫øt
                results_data = {
                    "Ch·ªâ S·ªë Ph√¢n T√≠ch": [
                        "1. Kh√°ch h√†ng ƒë·ªô tu·ªïi t·ª´ 15 tr·ªü l√™n (B·∫£n ghi)",
                        "2. T√†i kho·∫£n thanh to√°n c·ªßa KHCN (Acctcd=421101 & Type=100)",
                        "2.1. T√†i kho·∫£n EKYC (thu·ªôc m·ª•c 2)",
                        "3. H·ªì s∆° CIF KHCN (Cust_TypeCode = 100) - UNIQUE", # M·ªöI
                        "4. H·ªì s∆° CIF KHTC (Cust_TypeCode ‚â† 100) - UNIQUE", # ƒê√É C·∫¨P NH·∫¨T
                        "5. T√†i kho·∫£n thanh to√°n c·ªßa KHTC (Acctcd=421101 & Type ‚â† 100)" # ƒê√É C·∫¨P NH·∫¨T
                    ],
                    "S·ªë L∆∞·ª£ng K·∫øt Qu·∫£": [
                        count_age_15_plus,
                        count_khcn_payment,
                        count_khcn_ekyc,
                        count_khcn_cif, # K·∫æT QU·∫¢ M·ªöI
                        count_khtc_cif,
                        count_khtc_payment
                    ]
                }
                
                results_df = pd.DataFrame(results_data)

                # Hi·ªÉn th·ªã b·∫±ng Streamlit columns v√† metrics
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.metric(
                        label="1. KH L·ªõn h∆°n 15 tu·ªïi", 
                        value=f"{count_age_15_plus:,}",
                        delta="B·∫£n ghi"
                    )
                with col2:
                    st.metric(
                        label="2. TKTT KHCN", 
                        value=f"{count_khcn_payment:,}",
                        delta=f"Trong ƒë√≥ EKYC: {count_khcn_ekyc:,}"
                    )
                with col3:
                    st.metric(
                        label="3. H·ªì s∆° CIF KHCN (Duy nh·∫•t)", # ƒê√É C·∫¨P NH·∫¨T
                        value=f"{count_khcn_cif:,}",
                        delta=f"KHTC CIF: {count_khtc_cif:,} (M·ª•c 4)" # K√®m CIF KHTC
                    )
                    
                st.markdown("---")
                
                # B·∫£ng chi ti·∫øt k·∫øt qu·∫£
                st.table(results_df.set_index("Ch·ªâ S·ªë Ph√¢n T√≠ch"))

                st.balloons() 
                st.success("Ph√¢n t√≠ch d·ªØ li·ªáu ho√†n t·∫•t!")

        except Exception as e:
            st.error(f"ƒê√£ x·∫£y ra l·ªói trong qu√° tr√¨nh x·ª≠ l√Ω: {e}")
            st.write("Vui l√≤ng ki·ªÉm tra l·∫°i ƒë·ªãnh d·∫°ng t·ªáp Excel, ƒë·∫∑c bi·ªát l√† c·ªôt **Birthday**.")

if __name__ == '__main__':
    main()
